options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SQLParser)
// importimport java.io.*;
import java.util.ArrayList;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import sql.*;

public class SQLParser
{
  /* Constant Definition */
  public static final String PROMPT 				= "DB_2014-15395> ";

  public static final String DB_TABLE_LIST 		= "--DBTableList";

  static Environment myDbEnvironment = null;

  static Database myDatabase = null;

  public static void main(String args []) throws ParseException
  {
    db_init();
    SQLParser parser = new SQLParser(System.in);
    System.out.print(PROMPT);
    while (true) {
      try {
        parser.command();
      }
      catch (Exception e) {
        e.printStackTrace();
        printMessage(new DBMessage(MsgType.SyntaxError));
        SQLParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(DBMessage q)
  {
    if (q != null && q.type != MsgType.NoMessage) {
      System.out.println(q);
    }
    System.out.print(PROMPT);
  }

  // Initialize Database  public static void db_init()
  {
    EnvironmentConfig envConfig = new EnvironmentConfig();
    envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);
    DatabaseConfig dbConfig = new DatabaseConfig();
    dbConfig.setAllowCreate(true);
    dbConfig.setSortedDuplicates(false);
    myDatabase = myDbEnvironment.openDatabase(null, "myDatabase", dbConfig);
    
    byte [] data = DataManager.search(myDatabase, DB_TABLE_LIST);
    
    if (data == null) {
      // Create new db table list      ArrayList <String> newTableList = new ArrayList <String> ();
      DataManager.insert(myDatabase, DB_TABLE_LIST, DataManager.serialize(newTableList));
    }
  }

  // Close Database  public static void db_close() {
    if (myDatabase != null) myDatabase.close();
    if (myDbEnvironment != null) myDbEnvironment.close();
  }
  

  // Query process for create table  public static DBMessage query_createTable(String table, ArrayList<Attribute> colDefs, ArrayList<ArrayList<String>> primary, ArrayList<ForeignKeyConstraint> foreign)
  {
    // Check if there already exists a table with same name    if (db_checkTableExist(table)) {      return new DBMessage(MsgType.TableExistenceError);
    }
    
    Relation relation = new Relation(table);
    
    DBMessage msg = null;
    msg = relation.createSchema(myDatabase, colDefs, primary, foreign);
    
    if (msg != null) {
      return msg;
    }
    
    Relation.db_insert(myDatabase, relation);
    db_insertTableList(table);
    return new DBMessage(MsgType.CreateTableSuccess, table);
  }

  // Query process for drop table  public static DBMessage query_dropTable(String table)
  {
    Relation relation = Relation.db_search(myDatabase, table);    if (relation == null) {       return new DBMessage(MsgType.NoSuchTable);
    }

    DBMessage msg;
    msg = relation.dropCleanUp(myDatabase);

    if (msg != null) {
      return msg;
    }
    
    DataManager.delete(myDatabase, table);
    db_removeTableList(table);
    return new DBMessage(MsgType.DropSuccess, table);
  }

  // Query process for desc operation  public static DBMessage query_desc(String table)
  {
    Relation relation = Relation.db_search(myDatabase, table);    if (relation == null) {      return new DBMessage(MsgType.NoSuchTable);
    }

    System.out.println(relation.describe());
    
    return new DBMessage();
  }

  // Query process for show tables  public static DBMessage query_showTables()
  {
    ArrayList <String> tableList = db_getTableList();
    // If there is no table in database    if (tableList.size() == 0)
    {      return new DBMessage(MsgType.ShowTablesNoTable);
    }
    
    System.out.println("----------------");
    for (String tableName : tableList)
    {
      System.out.println(tableName);
    }
    System.out.println("----------------");
    return new DBMessage();
  }

  // Query process for insert table  public static DBMessage query_insert(String table, ArrayList<String> colList, ArrayList<Value> valList)
  {
    Relation relation = Relation.db_search(myDatabase, table);
    if (relation == null) {
      return new DBMessage(MsgType.NoSuchTable);
    }
    
    DBMessage msg;
    msg = relation.insertRecord(myDatabase, colList, valList);
    
	if (msg != null) {
	  return msg;
	}
    
    Relation.db_replace(myDatabase, relation);    return new DBMessage(MsgType.InsertResult);
  }

  // Query process for delete table  public static DBMessage query_delete(String table, BooleanExpression where)
  {
    Relation relation = Relation.db_search(myDatabase, table);
    if (relation == null) {
      return new DBMessage(MsgType.NoSuchTable);
    }

    DBMessage msg;

    try { 
      msg = relation.delete(myDatabase, where);
    }
    catch (MyException e) {
      return e.getDBMessage();
    }

    Relation.db_replace(myDatabase, relation);
        return msg;
  }

  // Query process for select table  public static DBMessage query_select(ArrayList<Rename> selected, ArrayList<Rename> tables, BooleanExpression bxpr)
  {
    DBMessage msg;
    msg = Relation.selectQuery(myDatabase, selected, tables, bxpr);

    if (msg != null) {
      return msg;
    }
        return new DBMessage(MsgType.NoMessage);
  }

  // Get Table List
  private static ArrayList<String> db_getTableList() {
    byte[] data = DataManager.search(myDatabase, DB_TABLE_LIST);
    ArrayList<String> tableList = (ArrayList<String>) DataManager.deserialize(data);
    return tableList;
  }

  // Add to table list  private static void db_insertTableList(String table)
  {
    ArrayList < String > tableList = db_getTableList();
    if (tableList == null) return;
    if (tableList.contains(table)) return;
    tableList.add(table);
    DataManager.replace(myDatabase, DB_TABLE_LIST, DataManager.serialize(tableList));
  }

  // Delete from table list  private static void db_removeTableList(String table)
  {
    ArrayList < String > tableList = db_getTableList();
    if (tableList == null) return;
    if (!tableList.contains(table)) return;
    tableList.remove(table);
    DataManager.replace(myDatabase, DB_TABLE_LIST, DataManager.serialize(tableList));
  }

  // Check if table name exists  private static boolean db_checkTableExist(String table)
  {
    ArrayList < String > tableList = db_getTableList();
    return tableList.contains(table);
  }
}

PARSER_END(SQLParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
} // Default Skip Token
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < SHOW_TABLES : "show tables" >
| < SELECT : "select" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < INSERT_INTO : "insert into" >
| < VALUES : "values" >
| < NULL : "null" >
| < DELETE_FROM : "delete from" >
}

/* Change Lexical State when QUOTE appeared */
TOKEN :
{
  < QUOTE : "\'" > : IN_QUOTE
}

< IN_QUOTE >
SKIP :
{
  "\r"
| "\t"
| "\n"
}	 // Newly defined skip token
< IN_QUOTE >
TOKEN :
{
  < INQ_QUOTE : "\'" > : DEFAULT
| < INQ_SPACE : " " >
| < NON_QUOTE_SPECIAL_CHARACTERS : ~[ "\'", "\"", "0"-"9", "A"-"Z", "a"-"z" ] >
| < NON_QUOTE_CHARACTER :
    < DIGIT >
  | < ALPHABET >
  | < NON_QUOTE_SPECIAL_CHARACTERS >
  | < INQ_SPACE > >
}

TOKEN : /* Tokens */
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < SIGN :
    "+"
  | "-" >
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER :
    < ALPHABET >
    (
      < ALPHABET >
    | < UNDERSCORE >
    )* >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < ASTERISK : "*" >
| < PERIOD : "." >
| < COMP_OP :
    "<"
  | ">"
  | "="
  | ">="
  | "<="
  | "!=" >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < NN : < DIGIT > < DIGIT > >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
}

/* Parse Command */
void command() :
{}
{
  queryList()
|
  (
    < EXIT > 
    < SEMICOLON >
    {
      db_close();
      System.exit(0);
    }
  )
}

void queryList() :
{
  DBMessage msg;
}
{
  (
    msg = query()
    {
      printMessage(msg);
    }
  )+
}

DBMessage query() :
{
  DBMessage msg;
}
{
  (
    msg = createTableQuery()
  | msg = dropTableQuery()
  | msg = descQuery()
  | msg = selectQuery()
  | msg = insertQuery()
  | msg = deleteQuery()
  | msg = showTablesQuery()
  )
  { return msg; }
}

/* CREATE TABLE QUREY */
DBMessage createTableQuery() :
{
  DBMessage msg;
  String table;
  ArrayList<Attribute> colDefs = new ArrayList<Attribute>();
  ArrayList<ArrayList<String>> primary = new ArrayList<ArrayList<String>>();
  ArrayList<ForeignKeyConstraint> foreign = new ArrayList<ForeignKeyConstraint>();
  // TODO ArrayList < Parse_Create > schema;
}
{
  < CREATE_TABLE > 
  table = tableName() 
  tableElementList(colDefs, primary, foreign) 
  < SEMICOLON >
  {
    msg = query_createTable(table, colDefs, primary, foreign);
    return msg;
  }
}

void tableElementList(ArrayList<Attribute> colDefs, ArrayList<ArrayList<String>> primary, ArrayList<ForeignKeyConstraint> foreign) :
{}
{
  < LEFT_PAREN > 
  tableElement(colDefs, primary, foreign)
  (
    < COMMA > 
    tableElement(colDefs, primary, foreign)
  )*
  < RIGHT_PAREN >
}

void tableElement(ArrayList<Attribute> colDefs, ArrayList<ArrayList<String>> primary, ArrayList<ForeignKeyConstraint> foreign) :
{}
{
    columnDefinition(colDefs)
  | primaryKeyConstraint(primary)
  | referentialConstraint(foreign)
}

void columnDefinition(ArrayList<Attribute> colDefs) :
{
  Attribute newAttr;
  String colName;
}
{
  colName = columnName()
  { newAttr = new Attribute(colName); }
  dataType(newAttr)
  (
    < NOT > 
    < NULL >
    { newAttr.setNullable(false); }
  )?
  { colDefs.add(newAttr); }
}

void primaryKeyConstraint(ArrayList<ArrayList<String>> primary) :
{
  ArrayList <String> colList = new ArrayList<String>();
}
{
  < PRIMARY_KEY > 
  columnNameList(colList)
  { primary.add(colList); }
}

void referentialConstraint(ArrayList<ForeignKeyConstraint> foreign) :
{
  String table;
  ArrayList <String> foreignColList = new ArrayList<String>();
  ArrayList <String> refColList = new ArrayList<String>();
}
{
  < FOREIGN_KEY > 
  columnNameList(foreignColList) 
  < REFERENCES > 
  table = tableName()
  columnNameList(refColList)
  { foreign.add(new ForeignKeyConstraint(foreignColList, table, refColList)); }
}

void columnNameList(ArrayList<String> colList) :
{
  String elem;
}
{
  < LEFT_PAREN > 
  elem = columnName()
  {
    colList.add(elem);
  }
  (
    < COMMA > 
    elem = columnName()
    {
      colList.add(elem);
    }
  )*
  < RIGHT_PAREN >
}

void dataType(Attribute attr) :
{
  Token intval;
}
{
  < INT >
  { attr.setDataType(DataType.TYPE_INT); }
|
  (
    < CHAR > 
    < LEFT_PAREN > 
    intval = < INT_VALUE > 
    < RIGHT_PAREN >
    {
      attr.setDataType(DataType.TYPE_CHAR);
      attr.setCharLength(Integer.parseInt(intval.image));
    }
  )
| < DATE >
  { attr.setDataType(DataType.TYPE_DATE); }
}

String tableName() :
{
  Token id;
}
{
  id = < LEGAL_IDENTIFIER >
  {
    return id.image.toLowerCase();
  }
}

String columnName() :
{
  Token id;
}
{
  id = < LEGAL_IDENTIFIER >
  {
    return id.image.toLowerCase();
  }
}

/* DROP TABLE QUERY */
DBMessage dropTableQuery() :
{
  DBMessage msg;
  String table;
}
{
  < DROP_TABLE > 
  table = tableName() 
  < SEMICOLON >
  {
    msg = query_dropTable(table);
    return msg;
  }
}

/* DESC QUERY */
DBMessage descQuery() :
{
  DBMessage msg;
  String table;
}
{
  < DESC > 
  table = tableName() 
  < SEMICOLON >
  {
    msg = query_desc(table);
    return msg;
  }
}

/* SHOW TABLES QUERY */
DBMessage showTablesQuery() :
{
  DBMessage msg;
}
{
  < SHOW_TABLES > 
  < SEMICOLON >
  {
    msg = query_showTables();
    return msg;
  }
}

/* SELECT QUERY */
DBMessage selectQuery() :
{
  DBMessage msg;
  ArrayList<Rename> selected, tables;
  BooleanExpression boolExpr = null;
}
{
  < SELECT >
  selected = selectList()
  tables = fromClause()
  (
    boolExpr = whereClause()
  )?
  < SEMICOLON >
  {
    msg = query_select(selected, tables, boolExpr);
    return msg;
  }
}

ArrayList<Rename> selectList() :
{
  ArrayList<Rename> selected = new ArrayList<Rename>();
  Rename r;
}
{
  < ASTERISK >
  { return null; }
|
  (
    r = selectedColumn()
    { selected.add(r); }
    (
      < COMMA > 
      r = selectedColumn()
      { selected.add(r); }
    )*
  )
  { return selected; }
}

Rename selectedColumn() :
{
  String tName = null;
  String cName = null;
  String newName = null;
}
{
  (
    /*   * LOOKAHEAD : Warning Suppression : Choice Conflict   *   * Parser should check 2 token before entering '?' statement   * because both tableName() and columnName() are < LEGAL_IDENTIFIER >   */
    LOOKAHEAD(tableName() < PERIOD >)
    tName = tableName() 
    < PERIOD >
  )?
  cName = columnName()
  (
    < AS > 
    newName = columnName()
  )?
  { return new Rename(tName, cName, newName); }
}

ArrayList<Rename> fromClause() :
{ ArrayList<Rename> tables; }
{
  < FROM > 
  tables = tableReferenceList()
  { return tables; }
}

ArrayList<Rename> tableReferenceList() :
{
  ArrayList<Rename> tables = new ArrayList<Rename>();
  Rename r;
}
{
  r = referedTable()
  { tables.add(r); }
  (
    < COMMA > 
    r = referedTable()
    { tables.add(r); }
  )*
  { return tables; }
}

Rename referedTable() :
{
  String tName = null;
  String newName = null;
}
{
  tName = tableName()
  (
    < AS > 
    newName = tableName()
  )?
  { return new Rename(tName, null, newName); }
}

BooleanExpression whereClause() :
{ BooleanNode b; }
{
  < WHERE > 
  b = booleanValueExpression()
  { return new BooleanExpression(b); }
}

BooleanNode booleanValueExpression() :
{
  BooleanNode b1, b2;
}
{
  b1 = booleanTerm()
  (
    < OR > 
    b2 = booleanTerm()
    { b1 = new BooleanNode('|', b1, b2); }
  )*
  { return b1; }
}

BooleanNode booleanTerm() :
{
  BooleanNode b1, b2;
}
{
  b1 = booleanFactor()
  (
    < AND > 
    b2 = booleanFactor()
    { b1 = new BooleanNode('&', b1, b2); }
  )*
  { return b1; }
}

BooleanNode booleanFactor() :
{
  boolean isNot = false;
  BooleanNode b;
}
{
  (
    < NOT >
    { isNot = true; }
  )?
  b = booleanTest()
  {
	if (isNot) {
	  return new BooleanNode('~', b);
	}
	else {
	  return b;
	}
  }
}

BooleanNode booleanTest() :
{
  Predicate p;
  BooleanNode b;
}
{
  p = predicate()
  { return new BooleanNode(p); }
| b = parenthesizedBooleanNode()
  { return b; }
}

BooleanNode parenthesizedBooleanNode() :
{ BooleanNode b; }
{
  < LEFT_PAREN > 
  b = booleanValueExpression() 
  < RIGHT_PAREN >
  { return b; }
}

Predicate predicate() :
{ Predicate p; }
{

  (
   /*
    * LOOKAHEAD : Warning Suppression : Conflict involving two expansions
    *
    * Parser should check compOperand() and < COMP_OP >
    * because both comparisonPredicate() and nullPredicate() can be start with < LEGAL_IDENTIFIER >
    */
    LOOKAHEAD(compOperand() < COMP_OP >)
    p = comparisonPredicate()
  | p = nullPredicate()
  )
  { return p; }
}

Predicate comparisonPredicate() :
{
  Token t;
  ColValTuple vc1, vc2;
}
{
  vc1 = compOperand() 
  t = < COMP_OP >
  vc2 = compOperand()
  {
    return Predicate.generate(Comparator.convert(t.image), vc1, vc2);
  }
}

ColValTuple compOperand() :
{
  Value v;
  String t = null, c;
}
{
  v = comparableValue()
  { return new ColValTuple(v); }
|
  (
    (
     /*      * LOOKAHEAD : Warning Suppression : Choice Conflict      *      * Parser should check 2 token before entering '?' statement      * because both tableName() and columnName() are < LEGAL_IDENTIFIER >      */
      LOOKAHEAD(tableName() < PERIOD >)
      t = tableName() 
      < PERIOD >
    )?
    c = columnName()
    {  return new ColValTuple(t, c); }
  )
}

Value comparableValue() :
{
  Token id;
}
{
  id = < INT_VALUE >
  { return new Value(Integer.parseInt(id.image)); }
| id = < CHAR_STRING >
  { return new Value(id.image.substring(1, id.image.length()-1)); }
| id = < DATE_VALUE >
  { return new Value(new Date(id.image)); }
}

Predicate nullPredicate() :
{
  String t = null, c;
  Comparator op;
}
{
  (
   /*    * LOOKAHEAD : Warning Suppression : Choice Conflict    *    * Parser should check 2 token before entering '?' statement    * because both tableName() and columnName() are < LEGAL_IDENTIFIER >    */
    LOOKAHEAD(tableName() < PERIOD >)
    t = tableName() 
    < PERIOD >
  )?
  c = columnName() 
  op = nullOperation()
  { return new Predicate(op, t, c); }
}

Comparator nullOperation() :
{ boolean isNull = true; }
{
  < IS > 
  (
    < NOT >
    { isNull = false; }
  )? 
  < NULL >
  { return Comparator.convert(isNull); }
}

/* INSERT QUERY */
DBMessage insertQuery() :
{
  DBMessage msg;
  String table;
  ArrayList<String> colList = new ArrayList<String>();
  ArrayList<Value> valList = new ArrayList<Value>();
}
{
  < INSERT_INTO > 
  table = tableName() 
  insertColumnsAndSource(colList, valList) 
  < SEMICOLON >
  {
    msg = query_insert(table, colList, valList);
    return msg;
  }
}

void insertColumnsAndSource(ArrayList<String> colList, ArrayList<Value> valList) :
{
  Relation r;
}
{
  (
    columnNameList(colList)
  )?
  valueList(valList)
}

void valueList(ArrayList<Value> valList) :
{
  Value val;
}
{
  < VALUES > 
  < LEFT_PAREN > 
  val = value()
  {
    valList.add(val);
  }    
  (
    < COMMA > 
    val = value()
    {
      valList.add(val);
    }
  )*
  < RIGHT_PAREN >
}

Value value() :
{
  Value val;
}
{
  < NULL >
  { return new Value(); }
| val = comparableValue()
  { return val; }
}

/* DELETE QUERY */
DBMessage deleteQuery() :
{
  DBMessage msg;
  String t;
  BooleanExpression b = null;
}
{
  < DELETE_FROM > 
  t = tableName()
  (
    b = whereClause()
  )?
  < SEMICOLON >
  {
    msg = query_delete(t, b);
    return msg;
  }
}
